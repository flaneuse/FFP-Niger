warning(paste('Removing columns:', paste(no_var$var, collapse = ', '), 'due to no variation'))
df = df %>% select(-one_of(no_var$var))
}
pca = df %>%
prcomp(center = center, scale = scale)
# calculate variance explained:
var_expl = cumsum((pca$sdev)^2) / sum(pca$sdev^2)
# plot the loadings
loadings = data.frame(pca$rotation) %>% mutate(var = row.names(pca$rotation))
fill_lim = max(max(loadings$PC1), abs(min(loadings$PC1)))
p = ggplot(loadings, aes(x = PC1, fill = PC1,
y = forcats::fct_reorder(var, PC1))) +
geom_vline(xintercept = 0, colour = grey75K, size = 1.5) +
geom_point(size = 5, shape = 22) +
scale_fill_gradientn(colours = PiYG, limits = c(-fill_lim, fill_lim)) +
ggtitle(paste('Variance explained: ', var_expl[1])) +
theme_xgrid()
print(p)
# save index to df
if(save_all == TRUE) {
df = df %>% bind_cols(!!var_name := pca$x[,1])
} else {
df = data.frame(x = pca$x[,1]) %>% rename(!!var_name := x)
}
if(save_params == FALSE){
return(df)
} else{
return(list(data = df, loadings = loadings, variance = var_expl))
}
}
count_NA = function(df, filter = TRUE){
temp = t(df %>% summarise_all(funs(sum(is.na(.)))))
temp = data.frame(var = row.names(temp), n = temp) %>% arrange(desc(n))
if(filter == TRUE) {
temp %>% filter(n > 0)
} else {
temp
}
}
count_value = function(df, value = c(8, 9, 98, 99, 998, 999), filter = TRUE){
temp = t(df %>% summarise_all(funs(sum(. %in% value))))
temp = data.frame(var = row.names(temp), n = temp) %>% arrange(desc(n))
if(filter == TRUE) {
temp %>% filter(n > 0)
} else {
temp
}
}
is_binary = function(data) {
sum(! na.exclude(unique(data))%in% c(0,1)) == 0
}
id_type = function(data) {
case_when(is_binary(data) ~ 'binary',
is_numeric(data) ~ 'numeric',
is.factor(data) ~ 'factor',
is.character(data) ~ 'character',
TRUE ~ 'unknown'
)
}
# isolates continuous variables:
type_of = function(df) {
temp = df %>% summarise_all(funs(id_type(.))) %>% t()
data.frame(var = row.names(temp), type = temp) %>% arrange(type)
}
# calculates incidence of binary values
calc_pct = function(df) {
temp = t(df %>% summarise_if(.predicate = is_binary, .funs = funs(sum(., na.rm = TRUE)/n())))
data.frame(var = row.names(temp), pct = temp) %>% arrange(desc(pct))
}
#' based on FAO http://www.fao.org/wairdocs/ilri/x5443e/x5443e04.htm
#'
calc_tlu = function(df, cow_var = cows, camel_var = camels,
sheep_var = sheep, goat_var = goats,
equine_var = equines,
horse_var = NA, mule_var = NA, ass_var = NA,
pig_var = NA,
chicken_var = chickens,
duck_var = ducks) {
camel_wt = 1
cow_wt = 0.7
sheep_wt = 0.1
goat_wt = 0.1
horse_wt = 0.8
mule_wt = 0.7
ass_wt = 0.5
equine_wt = sum(ass_wt, mule_wt, horse_wt)/3
pig_wt = 0.2
poultry_wt = 0.01
cow_var = enquo(cow_var)
camel_var = enquo(camel_var)
sheep_var = enquo(sheep_var)
goat_var = enquo(goat_var)
equine_var = enquo(equine_var)
horse_var = enquo(horse_var)
mule_var = enquo(mule_var)
ass_var = enquo(ass_var)
pig_var = enquo(pig_var)
chicken_var = enquo(chicken_var)
duck_var = enquo(duck_var)
wt_animal = function(var, wt) {
if(!is.na(var)){
as.numeric(var) * wt
} else {
0
}
}
df %>% mutate(TLU =
wt_animal(!!camel_var, camel_wt) +
wt_animal(!!cow_var, cow_wt) +
wt_animal(!!sheep_var, sheep_wt) +
wt_animal(!!goat_var, goat_wt) +
wt_animal(!!equine_var, equine_wt) +
wt_animal(!!horse_var, horse_wt) +
wt_animal(!!mule_var, mule_wt) +
wt_animal(!!ass_var, ass_wt) +
wt_animal(!!pig_var, pig_wt) +
wt_animal(!!chicken_var, poultry_wt) +
wt_animal(!!duck_var, poultry_wt)
)
}
calc_tlu(hh)
x = kids %>% select(hh_num, stunting, kid_hemoglobin) %>% sample_frac(0.1)
#' Replace multiple missing codes with NAs over any number of variables
#'
replace_missing = function(df, missing_codes,  ...) {
# more generic version of Hadley's na_if which can take in list of codes rather than single one.
na.if = function(df, missing_codes) {
df[df %in% missing_codes] = NA
return(df)
}
var = quos(...)
df %>% mutate_at(funs(na.if(., missing_codes)), .vars = var)
}
replace_missing(x, c(9996, 9997, 9998, 9999), kid_hemoglobin)
replace_missing(x, c(9996, 9997, 9998, 9999), stunting, kid_hemoglobin)
library(haven)
library(tidyverse)
library(svywrangler)
library(forcats)
data_dir = '~/Documents/USAID/Niger/NER_2012_DHS/'
womens_raw = read_dta(paste0(data_dir, 'niir61dt/NIIR61FL.DTA'))
mens_raw = read_dta(paste0(data_dir, 'nimr61dt/NIMR61FL.DTA'))
w = womens_raw %>%
group_by(cluster = v001, hh_num = v002) %>%
mutate(owns_house = ifelse(v745a %in% 1:3, 1, 0)) %>%
summarise(women_houses = sum(owns_house, na.rm = TRUE))
m = mens_raw %>%
group_by(cluster = mv001, hh_num = mv002) %>%
mutate(owns_house = ifelse(mv745a %in% 1:3, 1, 0)) %>%
summarise(men_houses = sum(owns_house, na.rm = TRUE))
houses = full_join(m,w, by = c('cluster', 'hh_num')) %>%
ungroup() %>%
mutate(owns_house = as.numeric(men_houses > 0 | women_houses > 0)) %>%
select(cluster, hh_num, owns_house)
hh_raw = read_dta(paste0(data_dir, 'nihr61dt/NIHR61FL.DTA'))
hh = hh_raw %>%
filter(hv025 == 2) %>%
mutate(
# calculate number sleeping as number of de jure members, unless de jure = 0.  Then go w/ defacto.
num_sleep = ifelse(hv012 == 0, hv013, hv012),
# convert to proper decimals
hh_wt = hv005 / 1e6
) %>%
select(
# hh sampling attributes
cluster = hv001, hh_num = hv002, psu = hv021, strata = hv022,
hh_wt, int_month = hv006, head_sex = hv219,
# geography
region = hv024, urban = hv025,
# infrastructure:
hh_size = hv009, num_sleep, num_rooms = hv216, elec = hv206,
where_cook = hv241,
floor_type = hv213, wall_type = hv214, roof_type = hv215,
# WASH:
drinking_src = hv201, time2water = hv204,
toilet_src = hv205, shared_toilet = hv225,
# ag assets:
owns_land = hv244, land_size = hv245,
# assuming "horses/ donkeys/ mules" is an equal distribution of all 3 animals, when calculating TLUs
cows = hv246b, equines = hv246c, goats = hv246d,
sheep = hv246e, chickens = hv246f, camels = hv246g, ducks = hv246h,
# durable assets:
radio = hv207, tv = hv208, refrigerator = hv209,
bicycle = hv210, motorcycle = hv211, car = hv212,
canoe = sh118e, cyclomotor = sh118f,
telephone = hv221, mobile = hv243a, vcr = sh110d, computer = sh110k,
ac = sh110h, antenna = sh110j,
oven = sh110i, cooking_fuel = hv226,
watch = hv243b,
animal_cart = hv243c, plow = sh110m, motor_pump = sh110n,
num_bednets = hml1, owns_bednet = hv227,
# banking
bank_acct = hv247,
WI_DHS_rural = hv271r)
type_of(hh) %>% filter(type == 'numeric')
hh = hh %>% left_join(houses, by = c("cluster", "hh_num"))
View(id_weirdos(hh))
hh %>% count_value()
hh = hh %>%
replace_missing(missing_codes = 9, bank_acct, owns_land, elec,
shared_toilet, radio, tv, refrigerator, bicycle,
car, motorcycle, telephone, owns_land,
mobile, watch, animal_cart, where_cook,
# note: these are Niger-specific variables and are not listed as being NA in survey.
# However, seems only logical choice, since they are binaries.
vcr, canoe, cyclomotor, computer, ac, antenna, motor_pump, oven, plow
) %>%
replace_missing(missing_codes = c(98, 99), cows, equines, goats, sheep,
chickens, camels, ducks,
toilet_src, drinking_src, num_rooms,
roof_type, floor_type, wall_type, num_bednets) %>%
replace_missing(missing_codes = c(998, 999), land_size, time2water) %>%
# Calculate ratio of people to rooms
mutate(ppl_room = ifelse(num_rooms > 0, trunc(num_sleep / num_rooms), num_sleep),
water_within30 = time2water <= 30)
hh %>% count_value(8)
hh %>% count_value(9)
hh %>% count_value(98)
hh %>% count_value(99)
hh %>% count_value(998)
hh %>% count_value(999)
hh = hh %>%
# convert to decimals
mutate(land_size = land_size/10,
WI_DHS_rural = WI_DHS_rural / 1e5 ) %>%
# create a copy
mutate(cow_cat = cows,
equine_cat = equines,
goat_cat = goats,
sheep_cat = sheep,
camel_cat = camels,
chicken_cat = chickens,
duck_cat = ducks) %>%
# large animals
mutate_at(funs(cut(., breaks = c(-1, 0, 4, 9, 100),
labels = c('0', '1-4', '5-9', '10+'))),
.vars = vars(cow_cat, equine_cat, goat_cat, sheep_cat, camel_cat)) %>%
# small animals
mutate_at(funs(cut(., breaks = c(-1, 0, 9, 29, 100),
labels = c('0', '1-9', '10-29', '30+'))),
.vars = vars(chicken_cat, duck_cat)) %>%
# mutate(where_cook_cat = fct_collapse(where_cook,
#                                      indoors = c("In the house", "In a separate building"),
#                                      outdoors = "Outdoors")) %>%
calc_tlu()
lump_thresh = 0.05
hh = hh %>%
mutate(wall_type = fct_lump(wall_type, prop = lump_thresh),
roof_type = fct_lump(roof_type, prop = lump_thresh),
floor_type = fct_lump(floor_type, prop = lump_thresh),
cooking_fuel = fct_lump(cooking_fuel, prop = lump_thresh))
hh = hh %>%
mutate(wall_type = fct_lump(as.factor(wall_type), prop = lump_thresh),
roof_type = fct_lump(as.factor(roof_type), prop = lump_thresh),
floor_type = fct_lump(as.factor(floor_type), prop = lump_thresh),
cooking_fuel = fct_lump(as.factor(cooking_fuel), prop = lump_thresh))
hh = hh %>%
dummize(remove_factors = FALSE,
floor_type, wall_type, roof_type,
drinking_src, toilet_src,
cooking_fuel,
cow_cat, camel_cat, equine_cat, goat_cat,
sheep_cat, chicken_cat, duck_cat)
#' @examples
#' dummize(mtcars, remove_factors = FALSE, cyl)
#' dummize(mtcars, remove_factors = TRUE, cyl, gear)
dummize = function(df, remove_factors, ...) {
var = quos(...)
var_formulas = lapply(var, function(x) as.formula(paste0('~', quo_name(x), '-1')))
var_names = lapply(var, function(x) quo_name(x))
# Convert to factors, if not already
df = df %>% mutate_at(.funs = funs(as.factor(.)), .vars = var)
# create dummies across list of vars
dummies = lapply(var_formulas, function(x)
model.matrix(x, model.frame(~ ., df, na.action = na.pass)) %>% data.frame())
df = df %>% bind_cols(dummies)
if(remove_factors == TRUE) {
var_names = unlist(var_names)
return(df %>% select(-one_of(var_names)))
} else {
return(df)
}
}
hh = hh %>%
dummize(remove_factors = FALSE,
floor_type, wall_type, roof_type,
drinking_src, toilet_src,
cooking_fuel,
cow_cat, camel_cat, equine_cat, goat_cat,
sheep_cat, chicken_cat, duck_cat)
glimpse(hh)
hh = hh %>%
mutate(land_size = ifelse(owns_land == 0, 0, land_size),
shared_toilet = ifelse(toilet_src %in% c(30, 31), 1, shared_toilet))
count_NA(hh)
hh_pca = hh %>% mutate_if(funs(coalesce(., 0)), .predicate = is.numeric)
count_NA(hh_pca)
pca2 = hh_pca %>%
select(  # infrastructure:
owns_house, ppl_room, elec,
# where_cook = hv241,
contains('floor_type'), -floor_type,
contains('wall_type'), -wall_type,
contains('roof_type'), -roof_type,
# # WASH:
# drinking_src = hv201, time2water = hv204,
# toilet_src = hv205, shared_toilet = hv225,
# ag assets:
owns_land, land_size,
# assuming "horses/ donkeys/ mules" is an equal distribution of all 3 animals, when calculating TLUs
contains('cat'), -cow_cat, -camel_cat, -chicken_cat, -equine_cat, -goat_cat, -duck_cat,-sheep_cat,
# durable assets:
radio, tv, refrigerator,
bicycle, motorcycle, car,
canoe, cyclomotor,
telephone, mobile, vcr, computer,
ac, antenna,
oven, contains('cooking_fuel'), -cooking_fuel,
watch,
animal_cart, plow,motor_pump,
# num_bednets, owns_bednet
#
# banking
bank_acct) %>%
calc_idx(save_params = T)
pca2$loadings
pca2$variance
attr(hh$wall_type, 'labels')
attr(hh_raw$hv214, 'labels')
View(hh)
calc_pct(hh) %>% filter(pct < 0.01)
pca3 = hh_pca %>%
select(  # infrastructure:
owns_house, ppl_room, elec,
# where_cook = hv241,
contains('floor_type'), -floor_type,
contains('wall_type'), -wall_type,
contains('roof_type'), -roof_type,
# # WASH:
# drinking_src = hv201, time2water = hv204,
# toilet_src = hv205, shared_toilet = hv225,
# ag assets:
owns_land, land_size,
# assuming "horses/ donkeys/ mules" is an equal distribution of all 3 animals, when calculating TLUs
TLU,
# durable assets:
radio, tv, refrigerator,
bicycle, motorcycle, car,
canoe, cyclomotor,
telephone, mobile, vcr, computer,
ac, antenna,
oven, contains('cooking_fuel'), -cooking_fuel,
watch,
animal_cart, plow,motor_pump,
# num_bednets, owns_bednet
#
# banking
bank_acct) %>%
calc_idx(save_params = T)
library(llamar)
calc_idx = function(df, var_name = 'wlth_idx',
center = TRUE, scale = TRUE,
save_params = FALSE, save_all = FALSE) {
# Check that everything has *some* variation
std = df %>% summarise_all(funs(sd(.))) %>% t() %>% data.frame()
colnames(std) = 'sd'
no_var = std %>% mutate(var = row.names(std)) %>% filter(sd == 0)
if (nrow(no_var) > 0) {
warning(paste('Removing columns:', paste(no_var$var, collapse = ', '), 'due to no variation'))
df = df %>% select(-one_of(no_var$var))
}
pca = df %>%
prcomp(center = center, scale = scale)
# calculate variance explained:
var_expl = cumsum((pca$sdev)^2) / sum(pca$sdev^2)
# plot the loadings
loadings = data.frame(pca$rotation) %>% mutate(var = row.names(pca$rotation))
fill_lim = max(max(loadings$PC1), abs(min(loadings$PC1)))
p = ggplot(loadings, aes(x = PC1, fill = PC1,
y = forcats::fct_reorder(var, PC1))) +
geom_vline(xintercept = 0, colour = grey75K, size = 1.5) +
geom_point(size = 5, shape = 22) +
scale_fill_gradientn(colours = PiYG, limits = c(-fill_lim, fill_lim)) +
ggtitle(paste('Variance explained: ', var_expl[1])) +
theme_xgrid()
print(p)
# save index to df
if(save_all == TRUE) {
df = df %>% bind_cols(!!var_name := pca$x[,1])
} else {
df = data.frame(x = pca$x[,1]) %>% rename(!!var_name := x)
}
if(save_params == FALSE){
return(df)
} else{
return(list(data = df, loadings = loadings, variance = var_expl, pca = pca))
}
}
pca2 = hh_pca %>%
select(  # infrastructure:
owns_house, ppl_room, elec,
# where_cook = hv241,
contains('floor_type'), -floor_type,
contains('wall_type'), -wall_type,
contains('roof_type'), -roof_type,
# # WASH:
# drinking_src = hv201, time2water = hv204,
# toilet_src = hv205, shared_toilet = hv225,
# ag assets:
owns_land, land_size,
# assuming "horses/ donkeys/ mules" is an equal distribution of all 3 animals, when calculating TLUs
contains('cat'), -cow_cat, -camel_cat, -chicken_cat, -equine_cat, -goat_cat, -duck_cat,-sheep_cat,
# durable assets:
radio, tv, refrigerator,
bicycle, motorcycle, car,
canoe, cyclomotor,
telephone, mobile, vcr, computer,
ac, antenna,
oven, contains('cooking_fuel'), -cooking_fuel,
watch,
animal_cart, plow,motor_pump,
# num_bednets, owns_bednet
#
# banking
bank_acct) %>%
calc_idx(save_params = T)
pca2
pca2$pca
biplot(pca2$pca)
biplot(pca3$pca)
pca3$pca
pca3 = hh_pca %>%
select(  # infrastructure:
owns_house, ppl_room, elec,
# where_cook = hv241,
contains('floor_type'), -floor_type,
contains('wall_type'), -wall_type,
contains('roof_type'), -roof_type,
# # WASH:
# drinking_src = hv201, time2water = hv204,
# toilet_src = hv205, shared_toilet = hv225,
# ag assets:
owns_land, land_size,
# assuming "horses/ donkeys/ mules" is an equal distribution of all 3 animals, when calculating TLUs
TLU,
# durable assets:
radio, tv, refrigerator,
bicycle, motorcycle, car,
canoe, cyclomotor,
telephone, mobile, vcr, computer,
ac, antenna,
oven, contains('cooking_fuel'), -cooking_fuel,
watch,
animal_cart, plow,motor_pump,
# num_bednets, owns_bednet
#
# banking
bank_acct) %>%
calc_idx(save_params = T)
biplot(pca3$pca)
pca3 = hh_pca %>%
select(  # infrastructure:
owns_house, ppl_room, elec,
# where_cook = hv241,
contains('floor_type'), -floor_type,
contains('wall_type'), -wall_type,
contains('roof_type'), -roof_type,
# # WASH:
# drinking_src = hv201, time2water = hv204,
# toilet_src = hv205, shared_toilet = hv225,
# ag assets:
owns_land, land_size,
# assuming "horses/ donkeys/ mules" is an equal distribution of all 3 animals, when calculating TLUs
TLU,
# durable assets:
radio, tv, refrigerator,
bicycle, motorcycle, car,
canoe, cyclomotor,
telephone, mobile, vcr, computer,
ac, antenna,
oven, contains('cooking_fuel'), -cooking_fuel,
watch,
animal_cart, plow,motor_pump,
# num_bednets, owns_bednet
#
# banking
bank_acct)
calc_pct(pca3 %>% filter(pct < 0.01)
calc_pct(pca3) %>% filter(pct < 0.01)
pca4 = hh_pca %>%
select(  # infrastructure:
owns_house, ppl_room, elec,
# where_cook = hv241,
contains('floor_type'), -floor_type,
contains('wall_type'), -wall_type,
contains('roof_type'), -roof_type,
# # WASH:
# drinking_src = hv201, time2water = hv204,
# toilet_src = hv205, shared_toilet = hv225,
# ag assets:
owns_land, land_size,
# assuming "horses/ donkeys/ mules" is an equal distribution of all 3 animals, when calculating TLUs
TLU,
# durable assets:
radio, tv,
bicycle, motorcycle,
mobile, vcr,
contains('cooking_fuel'), -cooking_fuel,
watch,
animal_cart, plow,motor_pump,
num_bednets, owns_bednet) %>%
calc_idx(save_params = T)
